version: '3'
services:
  unittest:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pwd;ls;coverage run --branch -m unittest --quiet; coverage xml -o build/unittest-coverage.xml; coverage html --directory build/unittest-coverage; coverage report --fail-under=100 --skip-covered'
  codacy:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'python-codacy-coverage -r build/unittest-coverage.xml'
    environment:
      - CODACY_PROJECT_TOKEN
  sonarcloud-scanner:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    environment:
      - SONAR_TOKEN
    volumes:
    - ${PWD}:${PWD}
    # SonarQube needs Xunit format, see https://docs.sonarqube.org/display/PLUG/Python+Unit+Tests+Execution+Reports+Import
    command: sh -c 'nosetests --nocapture --with-xunit --xunit-file=build/nosetests.xml tests/unittests; sonar-scanner -Dsonar.host.url=http://sonarcloud.io -Dsonar.organization=fniessink-github -Dsonar.login=$${SONAR_TOKEN}'
  sonarqube-scanner:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    depends_on:
      - sonarqube-server
    command: sh -c 'nosetests --nocapture --with-xunit --xunit-file=build/nosetests.xml tests/unittests; sonar-scanner -Dsonar.host.url=http://sonarqube:9000 -Dsonar.login=`python sonarqube_token.py http://sonarqube.:9000`'
  sonarqube-server:
    image: sonarqube:7.1-alpine
    container_name: sonarqube
    ports:
      - "9000:9000"
      - "9002:9002"
  jenkins:
    image: trion/jenkins-docker-client
    container_name: jenkins
    ports:
      - "8080:8080"
      - "50000:5000"
    volumes:
      - ${PWD}/.jenkins:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
  behave:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'python setup.py --quiet develop; behave --format null tests/features; coverage report --rcfile=.coveragerc-behave --fail-under=100 --skip-covered'
  mypy:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'mypy next_action'
  pylint:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pylint next_action tests docs'
  pycodestyle:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pycodestyle .'
  pydocstyle:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pydocstyle .'
  bandit:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'bandit -r next_action --format custom 2> /dev/null; bandit -r next_action --format html --output build/bandit.html 2> /dev/null'  # Ignore boiler plate output
  owasp-dependency-check:
    image: owasp/dependency-check:latest
    volumes:
    - ${PWD}:/src
    - ${PWD}/.owasp-dependency-check-data:/usr/share/dependency-check/data
    - ${PWD}/build/owasp-dependency-check-report:/report
    command: /usr/share/dependency-check/bin/dependency-check.sh --scan /src --format "ALL" --project "OWASP Dependency Check" --out /report
  vulture:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'vulture next_action .vulture-whitelist.py'
  pyroma:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pyroma --min=10 . 2> /dev/null'  # Ignore the error messages on stderr about the README file because pyroma doesn't accept Markdown.
  shellcheck:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'shellcheck extra/.next-action-completion.bash'
  gherkin-lint:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'gherkin-lint tests/features/*.feature'
  markdown-lint:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'markdownlint README*.md; markdownlint -c .markdownlint-changelog.json CHANGELOG.md'
  pydeps:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pydeps --noshow -T png -o docs/dependencies.png next_action'
  pyreverse:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'pyreverse --module-names=yes --show-associated=1 --show-ancestors=1 --output=png next_action > /dev/null; mv classes.png docs/; mv packages.png docs/'
  hadolint:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'hadolint Dockerfile'
  docker-compose-config:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'docker-compose config --quiet'
  update_readme:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ${PWD}:${PWD}
    command: sh -c 'python setup.py --quiet develop; python docs/update_readme.py'
  release:
    image: fniessink/next-action-dev:latest
    working_dir: ${PWD}
    volumes:
    - ${PWD}:${PWD}
    command: sh -c 'rm -rf dist; python setup.py sdist bdist_wheel; twine check dist/*; twine upload dist/*'
    environment:
      - TWINE_USERNAME
      - TWINE_PASSWORD
